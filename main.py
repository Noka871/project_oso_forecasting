"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –û–°–û
"""

import os
import sys
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É modules –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

from src.utils.config import Config
from data_loader import DataLoader
from model import create_model, get_callbacks
from trainer import ModelTrainer
from predictor import Predictor


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üåç –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –û–ë–©–ï–ì–û –°–û–î–ï–†–ñ–ê–ù–ò–Ø –û–ó–û–ù–ê (–û–°–û)")
    print("=" * 70)

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('results/predictions', exist_ok=True)
    os.makedirs('results/plots', exist_ok=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()

    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n1. üìÇ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-" * 40)

    data_loader = DataLoader(config)

    if not data_loader.load_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return

    if not data_loader.clean_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return

    # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    print("\n2. üîß –ü–û–î–ì–û–¢–û–í–ö–ê –ü–†–ò–ó–ù–ê–ö–û–í")
    print("-" * 40)

    X, y = data_loader.prepare_features()
    X_train, X_test, y_train, y_test, years_test = data_loader.split_data(X, y)

    # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feature_importance = data_loader.get_feature_importance()
    print("\nüìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for feature, importance in feature_importance.items():
        print(f"   {feature}: {importance:.4f}")

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n3. üß† –°–û–ó–î–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("-" * 40)

    model = create_model(X_train.shape[1], config)
    model.summary()

    # 4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\n4. üéì –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("-" * 40)

    trainer = ModelTrainer(model, config)
    callbacks = get_callbacks()

    history = trainer.train(X_train, y_train, callbacks)

    # 5. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
    print("\n5. üìä –û–¶–ï–ù–ö–ê –ú–û–î–ï–õ–ò")
    print("-" * 40)

    metrics, predictions = trainer.evaluate(X_test, y_test)

    # 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n6. üìà –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 40)

    # –°–æ–∑–¥–∞–µ–º Predictor
    predictor = Predictor(data_loader, data_loader.scaler_y)

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_df = predictor.create_results_dataframe(
        y_test, predictions, years_test, X_test
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    predictor.save_predictions(results_df, config.OUTPUT_PATH)

    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    trainer.plot_training_history('results/plots/training_history.png')
    predictor.plot_predictions(
        results_df,
        'results/plots/predictions.png',
        config
    )
    predictor.plot_feature_importance(
        feature_importance,
        'results/plots/feature_importance.png',
        config
    )

    print("\n" + "=" * 70)
    print("‚úÖ –ü–†–û–ì–†–ê–ú–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 70)
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'results/'")
    print(f"üìä –§–∞–π–ª —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏: {config.OUTPUT_PATH}")
    print("=" * 70)


if __name__ == "__main__":
    main()